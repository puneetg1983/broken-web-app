# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Node.js HTTP 500 App (No AI)

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Add concurrency configuration to ensure only one workflow runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  APP_SERVICE_NAME: broken-node-http500-noai-${{ github.actor }}
  APP_SERVICE_PLAN_NAME: broken-node-common-${{ github.actor }}
  WEBAPP_URL: https://broken-node-http500-noai-${{ github.actor }}.azurewebsites.net
  CONFIGURATION: 'production'
  SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
  RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
  LOG_ANALYTICS_NAME: broken-node-${{ github.actor }}

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: node/package-lock.json

    - name: Install dependencies
      working-directory: node
      run: npm ci

    - name: Create deployment package
      working-directory: node
      shell: pwsh
      run: |
        # Create a deployment directory
        New-Item -ItemType Directory -Force -Path deploy
        
        # Copy application files
        Copy-Item -Path app.js,package.json,setup.js,start.bat,README.md,web.config,startup.cmd,.deployment,iisnode.yml -Destination deploy/ -Force
        Copy-Item -Path views/ -Destination deploy/ -Recurse -Force
        
        # Create temp directory
        New-Item -ItemType Directory -Force -Path deploy/temp
        
        # Create .npmrc to ensure production install
        "production=true" | Out-File -FilePath deploy/.npmrc -Encoding utf8
        
        # Install production dependencies
        npm ci --only=production --prefix deploy

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app-noai
        path: node/deploy/

  deploy:
    runs-on: windows-latest
    needs: build
    
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app-noai
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.MANAGED_IDENTITY_CLIENTID }}
        tenant-id: ${{ secrets.TENANTID }}
        subscription-id: ${{ secrets.SUBSCRIPTIONID }}

    - name: List folder structure for debugging
      shell: pwsh
      run: Get-ChildItem -Recurse -Include "*.js","*.json","*.bicep" | Select-Object -First 20

    - name: Deploy Log Analytics Workspace
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ env.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
        template: ./node/infra/loganalytics.bicep
        parameters: logAnalyticsName=${{ env.LOG_ANALYTICS_NAME }}
        deploymentName: loganalytics-node-http500-noai-${{ github.run_number }}

    - name: Deploy Bicep (Web App & App Service Plan) with Retry
      shell: pwsh
      run: |
        $maxAttempts = 3
        $attempt = 1
        while ($attempt -le $maxAttempts) {
          Write-Host "Attempt $attempt of $maxAttempts for Bicep deployment"
          try {
            az deployment group create `
              --subscription "${{ env.SUBSCRIPTION_ID }}" `
              --resource-group "${{ env.RESOURCE_GROUP_NAME }}" `
              --template-file "./node/infra/http500-noai.bicep" `
              --parameters appServiceName="${{ env.APP_SERVICE_NAME }}" appServicePlanName="${{ env.APP_SERVICE_PLAN_NAME }}" logAnalyticsName="${{ env.LOG_ANALYTICS_NAME }}" `
              --name "node-http500-noai-deployment-${{ github.run_number }}"
            Write-Host "Bicep deployment succeeded on attempt $attempt"
            break
          }
          catch {
            Write-Host "Bicep deployment failed on attempt $attempt"
            if ($attempt -eq $maxAttempts) {
              Write-Host "All attempts failed. Exiting."
              exit 1
            }
            Write-Host "Waiting 30 seconds before retry..."
            Start-Sleep -Seconds 30
            $attempt++
          }
        }

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: '${{ env.APP_SERVICE_NAME }}'
        slot-name: 'Production'
        package: .

  test:
    runs-on: windows-latest
    needs: deploy
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: node/package-lock.json

    - name: Install dependencies
      working-directory: node
      run: npm ci

    - name: Run basic health checks
      shell: pwsh
      run: |
        Write-Host "Testing application endpoints..."
        
        # Wait for deployment to be ready
        Start-Sleep -Seconds 30
        
        # Test home page
        Write-Host "Testing home page..."
        try {
          Invoke-WebRequest -Uri "${{ env.WEBAPP_URL }}/" -UseBasicParsing | Out-Null
        } catch {
          Write-Host "Home page test failed"
          exit 1
        }
        
        # Test process metrics
        Write-Host "Testing process metrics..."
        try {
          Invoke-WebRequest -Uri "${{ env.WEBAPP_URL }}/process-metrics" -UseBasicParsing | Out-Null
        } catch {
          Write-Host "Process metrics test failed"
          exit 1
        }
        
        # Test HTTP 500 scenario page
        Write-Host "Testing HTTP 500 scenario page..."
        try {
          Invoke-WebRequest -Uri "${{ env.WEBAPP_URL }}/scenarios/http500/http500_1" -UseBasicParsing | Out-Null
        } catch {
          Write-Host "HTTP 500 scenario page test failed"
          exit 1
        }
        
        Write-Host "All health checks passed!"
      env:
        WEBAPP_URL: ${{ env.WEBAPP_URL }}

    - name: Test HTTP 500 scenario execution
      shell: pwsh
      run: |
        Write-Host "Testing HTTP 500 scenario execution..."
        
        # Test the actual HTTP 500 scenario (should return 500)
        try {
          $response = Invoke-WebRequest -Uri "${{ env.WEBAPP_URL }}/scenarios/http500/http500_1/actual" -UseBasicParsing
          $statusCode = $response.StatusCode
        } catch {
          $statusCode = $_.Exception.Response.StatusCode.value__
        }
        
        if ($statusCode -eq 500) {
          Write-Host "✅ HTTP 500 scenario working correctly (returned 500)"
        } else {
          Write-Host "❌ HTTP 500 scenario not working correctly (returned $statusCode)"
          exit 1
        }
      env:
        WEBAPP_URL: ${{ env.WEBAPP_URL }}
